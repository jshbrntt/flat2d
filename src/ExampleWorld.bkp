package  
{
	import flat2d.core.FlatGame;
	import flat2d.core.FlatWorld;
	import flat2d.entities.FlatBox;
	import flat2d.entities.FlatCircle;
	import flat2d.entities.FlatEntity;
	import flat2d.entities.FlatHandJoint;
	import flat2d.entities.FlatPoly;
	import flat2d.utils.BodyAtlas;
	import flat2d.utils.Key;
	import flat2d.utils.KeyManager;
	import nape.geom.Vec2;
	import nape.geom.Vec2List;
	import nape.phys.Body;
	import nape.phys.BodyType;
	import nape.shape.Polygon;
	import starling.display.Image;
	import starling.text.TextField;
	import starling.textures.Texture;
	import starling.utils.HAlign;
	import starling.utils.VAlign;
	
	/**
	 * ExampleWorld.as
	 * Created On:	22/01/2013 20:26
	 * Author:		Joshua Barnett
	 */
	
	public class ExampleWorld extends FlatWorld
	{
		[Embed(source = "../assets/logo_trans_inverted.png")]
		private var logoPNG:Class;
		
		[Embed(source = "../assets/landscape.xml", mimeType="application/octet-stream")]
		private var landscapeXML:Class;
		
		[Embed(source = "../assets/landscape.png")]
		private var landscapePNG:Class;
		
		private var _handJoint:FlatHandJoint;
		private var _frame:Vector.<FlatEntity>;
		private var _objects:Vector.<FlatEntity>;
		
		public function ExampleWorld(game:FlatGame)
		{
			super(game, Vec2.weak(0, 0));
		}
		
		override protected function initialize():void 
		{
			super.initialize();
			
			createObjects(500, 8, 14);
			createFrame();
			
			_handJoint	= new FlatHandJoint(this);;
		}
		
		private function createObjects(num:int = 10, min:Number = 20, max:Number = 40):void 
		{
			_objects	= new Vector.<FlatEntity>();
			for (var i:int = 0; i < num; ++i)
			{
				if ((Math.random() > .5) ? true : false)
				{
					_objects.push(addEntity(new FlatBox(randLim(100, 700), randLim(100, 500), randLim(min, max), randLim(min, max), null, false, Math.random() * 0xFFFFFF), true));
				} else {
					_objects.push(addEntity(new FlatCircle(randLim(100, 700), randLim(100, 500), randLim(min, max), null, false, Math.random() * 0xFFFFFF), true));
				}
				_objects[_objects.length - 1].group = "ground";
			}
		}
		
		private function createFrame(size:Number = 10):void
		{
			_frame	= new Vector.<FlatEntity>();
			_frame.push(new FlatBox(size / 2, stage.stageHeight / 2, size, stage.stageHeight));						// LEFT
			_frame.push(new FlatBox(stage.stageWidth - size / 2, stage.stageHeight / 2, size, stage.stageHeight));	// RIGHT
			_frame.push(new FlatBox(stage.stageWidth / 2, size / 2, stage.stageWidth, size));						// UP
			_frame.push(new FlatBox(stage.stageWidth / 2, stage.stageHeight - size / 2, stage.stageWidth, size));	// DOWN
			
			for each(var side:FlatBox in _frame)
			{
				side.body.type	= BodyType.STATIC;
				addEntity(side);
			}
		}
		
		private function randLim(min:Number, max:Number):Number
		{
			return min + Math.random() * (max - min);
		}
		
		override public function dispose():void 
		{
			KeyManager.remove(toggleDebug);
			while (_frame.length)
				removeEntity(_frame.pop(), true, true);
			_frame.length	= 0;
			while (_objects.length)
				removeEntity(_objects.pop(), true, true);
			_objects.length	= 0;
			if (_handJoint)
				_handJoint.dispose();
			_handJoint	= null;
			super.dispose();
		}
	}
}